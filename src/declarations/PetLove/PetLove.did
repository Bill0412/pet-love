type UserProfile = 
 record {
   id: principal;
   mate: opt principal;
   tokenId: opt TokenId__1;
 };
type TokenId__1 = text;
type TokenId = text;
type Request = 
 record {
   event: EventType;
   receiver: principal;
   requestId: text;
   sender: principal;
   state: EventState;
   tokenId: TokenId__1;
 };
type PetState = 
 variant {
   adopted;
   deprecated;
   notAdopted;
   onSelling;
 };
type PetProfile = 
 record {
   createTime: text;
   happiness: nat;
   id: TokenId__1;
   image: text;
   owner: record {
            principal;
            principal;
          };
   price: nat;
   state: PetState;
 };
type PetLove = 
 service {
   abandonPet: (TokenId) -> (bool);
   getAllPetsOnSelling: () -> (vec PetProfile);
   getAllPetsnotAdopted: () -> (vec PetProfile);
   getAllRequests: () -> (vec Request);
   getPetProfile: (TokenId) -> (opt PetProfile);
   getUserProfile: () -> (opt UserProfile);
   interactWithPet: (TokenId, ActionType) -> (bool);
   purchasePet: (principal, TokenId) -> (bool);
   randomGeneratePet: () -> (PetProfile);
   reponseACK: (text) -> (bool);
   reponseNAK: (text) -> (bool);
   sellPet: (TokenId, nat) -> (bool);
 };
type EventType = 
 variant {
   abandon;
   buy;
   sell;
 };
type EventState = 
 variant {
   failed;
   success;
   waiting;
 };
type ActionType = 
 variant {
   feed;
   play;
 };
service : (principal) -> PetLove
